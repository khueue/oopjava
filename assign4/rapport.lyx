#LyX 1.6.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass scrartcl
\use_default_options true
\language swedish
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language swedish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Titlehead
Objektorienterad programmering med Java, 10 hp
\begin_inset Newline newline
\end_inset

ST 2010
\end_layout

\begin_layout Title
Inlämningsuppgift 4
\begin_inset Newline newline
\end_inset

Simulering av ekologisk värld
\end_layout

\begin_layout Author
Sebastian Lundström (selu7901)
\end_layout

\begin_layout Section
Inledning
\end_layout

\begin_layout Standard
Denna rapport behandlar design och implementation av ett program som simulerar
 livet i en hage.
 I hagen kämpar olika varelser för sitt liv genom att jaga mat och föröka
 sig.
\end_layout

\begin_layout Standard
Lösningsförslag har diskuterats med Jon Borglund.
\end_layout

\begin_layout Section
Installation
\end_layout

\begin_layout Standard
Dessa instruktioner förutsätter att du befinner dig i en terminal i samma
 mapp som programmets Makefile.
 Du förutsätts även ha tillgång till Java 5 (eller senare) och programmet
 make.
 Allt som beskrivs i denna sektion uttrycks i mer detalj i programmets Makefile.
\end_layout

\begin_layout Standard
För att både kompilera och köra programmet skrivs enklast (där $ representerar
 kommandoprompten):
\end_layout

\begin_layout LyX-Code
$ make
\end_layout

\begin_layout Standard
Detta kommando kompilerar alla .java-filer och kör sedan det resulterande
 programmet.
 Vill du endast kompilera programmet skriver du:
\end_layout

\begin_layout LyX-Code
$ make compile
\end_layout

\begin_layout Standard
Vill du endast köra programmet skriver du:
\end_layout

\begin_layout LyX-Code
$ make run
\end_layout

\begin_layout Standard
Programmet går att konfigurera genom att ge parvisa argument:
\end_layout

\begin_layout LyX-Code
$ java pasture.Main     
\backslash

\end_layout

\begin_layout LyX-Code
    sheep.move.after 4  
\backslash

\end_layout

\begin_layout LyX-Code
    sheep.visibility 3  
\backslash

\end_layout

\begin_layout LyX-Code
    wolf.move.after  5  
\backslash

\end_layout

\begin_layout LyX-Code
    wolf.visibility  4
\end_layout

\begin_layout Standard
Ovanstående gör att får och vargar flyttar sig efter 4 resp.
 5 tick, och att de kan se 3 resp.
 4 rutor långt.
 Mer information och standardvärden finns i klassen 
\emph on
Main
\emph default
.
\end_layout

\begin_layout Section
Systemdesign
\end_layout

\begin_layout Standard
Här diskuterar jag min lösning i stora drag.
\end_layout

\begin_layout Subsection
Entiteter
\end_layout

\begin_layout Standard
Initialt försökte jag modellera entiteter genom ett komplext arv, så som
 levande djur, stationära djur, förökande djur o.s.v.
 Men jag insåg snabbt att arvet blir onödigt krångligt och inflexibelt.
 I stället nöjde jag mig med ett mycket enkelt och 
\begin_inset Quotes sld
\end_inset

platt
\begin_inset Quotes srd
\end_inset

 arv.
 Se figur:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename misc/Entity.svg
	width 50text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Klassdiagram över entiteter.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
För att möjliggöra varierande beteenden mellan olika entiteter skapade jag
 beteendeklasser, separerade från logiken i entititerna.
 Se figur:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename misc/Behavior.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Klassdiagram över entiteters beteenden.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Varje entitet har en samling beteenden som vid varje tick bestämmer hur
 entiteten agerar.
 Tack vare denna design är det enkelt att skapa fler beteenden, samt låta
 entiteter använda hur många eller hur få beteenden som helst, utan att
 påverka själva entitetsklasserna.
\end_layout

\begin_layout Standard
Man kan exempelvis skapa en entitet som äter och flyttar, en annan som flyttar
 och förökar sig, och en tredje som äter och förökar sig, utan att komplicera
 entitetsarvet.
 Varför inte skapa en entitet som inte gör något alls? Eller allt möjligt?
\end_layout

\begin_layout Subsection
Ramverk
\end_layout

\begin_layout Standard
Det givna ramverket har använts och är i stort sett intakt.
 De största förändringarna jag gjorde var att från 
\emph on
Pasture
\emph default
 flytta skapandet av de första entiteterna till en ny klass, 
\emph on
Seeder
\emph default
, och flytta logik som hanterar rutnätet till en ny klass, 
\emph on
Grid
\emph default
.
 På så sätt blev 
\emph on
Pasture
\emph default
 mer överskådlig.
\end_layout

\begin_layout Standard
Några saker fick byta namn, varav det viktigaste är 
\emph on
Entity
\emph default
 som fick byta till 
\emph on
IEntity
\emph default
.
\end_layout

\begin_layout Section
Klasser
\end_layout

\begin_layout Standard
Här beskrivs de viktigaste klasserna i systemet.
\end_layout

\begin_layout Subsection
Entiteter
\end_layout

\begin_layout Standard
Alla entitetsklasser är samlade i paketet 
\begin_inset Quotes sld
\end_inset

pasture.entity
\begin_inset Quotes srd
\end_inset

.
 Entiteter måste implementera interfacet 
\emph on
IEntity
\emph default
 som kräver metoder som är gemensamma för alla entiteter.
 Dessa metoder inkluderar 
\begin_inset Quotes sld
\end_inset

getters
\begin_inset Quotes srd
\end_inset

 för t.ex.
 hagen och entitetens position i den, metoder för att ta bort entiteten
 ur hagen, samt metoder för att undersöka om entiteten får stå på vissa
 positioner i hagen.
\end_layout

\begin_layout Standard
Den viktigaste metoden som interfacet kräver är 
\emph on
tick()
\emph default
, vilken anropas av simuleringsmotorn vid varje tidssteg.
 Metoden är tänkt att låta entiteten agera 
\begin_inset Quotes sld
\end_inset

ett snäpp
\begin_inset Quotes srd
\end_inset

, t.ex.
 genom att förflytta sig ett steg och försöka äta det som finns på den nya
 positionen.
 Exakt vad som skall hända vid varje tick bestäms av entitetens beteenden.
\end_layout

\begin_layout Standard
För enkelhetens skull finns en abstrakt basklass 
\emph on
Entity
\emph default
 som implementerar det mesta av interfacet.
 Konkreta klasser behöver därmed bara ärva av 
\emph on
Entity
\emph default
, skapa de beteenden som önskas och definiera metoden 
\emph on
maySharePositionWith()
\emph default
 som bestämmer om entiteten får stå på samma position som given annan entitet.
\end_layout

\begin_layout Subsection
Beteenden
\end_layout

\begin_layout Standard
Alla beteendeklasser är samlade i paketet 
\begin_inset Quotes sld
\end_inset

pasture.behavior
\begin_inset Quotes srd
\end_inset

.
 Beteenden måste implementera interfacet 
\emph on
IBehavior
\emph default
 och därmed metoden 
\emph on
act()
\emph default
.
 Vid varje tick anropar varje entitet sina beteendens 
\emph on
act()
\emph default
-metoder (förutsatt att entiteten fortfarande lever).
\end_layout

\begin_layout Standard
Den abstrakta basklassen 
\emph on
Behavior
\emph default
 tillhandahåller en timer som utlöses efter ett visst intervall.
 Äta gör man så fort tillfälle ges, alltså vid varje tick, medan förflyttning
 och förökning sker med jämna mellanrum.
 Detta konfigureras i subklasserna.
\end_layout

\begin_layout Standard
Eftersom olika varelser exempelvis förflyttar sig på likartade sätt finns
 ytterligare abstrakta klasser som ärver av 
\emph on
Behavior
\emph default
.
 Dessa klasser är 
\emph on
Eat
\emph default
, 
\emph on
Move
\emph default
 och 
\emph on
Reproduce
\emph default
.
\end_layout

\begin_layout Standard

\emph on
Eat
\emph default
 har ytterligare en timer, nämligen för att hålla koll på om entiteten svälter.
 Den implementerar även själva ätandet, men låter informationen om vad som
 faktiskt kan ätas definieras av subklasser genom metoden 
\emph on
mayEat()
\emph default
.
 Vargar kan exempelvis äta får, medan får kan äta grästuvor.
\end_layout

\begin_layout Standard

\emph on
Move
\emph default
 är den största beteendeklassen då den implementerar omfattande intelligens
 för att optimera nästa förflyttning.
 Subklasser till 
\emph on
Move
\emph default
 behöver endast definiera metoden 
\emph on
evaluatePosition()
\emph default
 som viktar en given position.
 Vargar föredrar positioner nära får, medan får föredrar positioner så långt
 bort ifrån vargar som möjligt men annars nära grästuvor.
\end_layout

\begin_layout Standard

\emph on
Reproduce
\emph default
 implementerar ett enkelt beteende för att föröka sig: finns det någon angränsan
de position som är ledig så skapas en ny entitet där.
 Vilken entitet som skapas bestäms av metoden 
\emph on
spawnChild()
\emph default
 som definieras i en subklass.
\end_layout

\begin_layout Standard
På detta vis blir de konkreta beteendeklasserna, t.ex.
 
\emph on
SheepMove
\emph default
 och 
\emph on
WolfReproduce
\emph default
, oerhört korta och koncisa.
\end_layout

\begin_layout Subsection
Ramverk
\end_layout

\begin_layout Standard
Alla ramverksklasser är samlade i paketet 
\begin_inset Quotes sld
\end_inset

pasture
\begin_inset Quotes srd
\end_inset

.
 Här går jag igenom de viktigaste förändringarna och tilläggen jag gjort.
\end_layout

\begin_layout Standard

\emph on
Config
\emph default
 är en abstrakt klass med statiska metoder som tillhandahåller ett enkelt
 sätt att hantera parametrar som behövs på olika ställen i systemet.
\end_layout

\begin_layout Standard

\emph on
Main
\emph default
 startar programmet och skapar alla standardinställningar.
 Om argument har givits till programmet kommer dessa argument att skriva
 över standardinställningarna.
\end_layout

\begin_layout Standard

\emph on
Pasture
\emph default
 är själva hagen.
 Den hanterar alla entiteter som skall finnas i hagen, samt vidarebefordrar
 metodanrop som har att göra med själva rutnätet till klassen 
\emph on
Grid
\emph default
.
\end_layout

\begin_layout Standard

\emph on
Grid
\emph default
 tar hand om rutnätet i hagen och håller reda på vilka entiteter som står
 på vilka positioner.
\end_layout

\begin_layout Standard

\emph on
GUI
\emph default
 tar hand om alla grafiska gränssnittskomponenter och ser till att hagen
 visas upp på skärmen.
\end_layout

\begin_layout Standard

\emph on
Engine
\emph default
 driver simuleringen och ber alla entiteter att agera vid jämna mellanrum.
\end_layout

\begin_layout Section
Artificiell intelligens
\end_layout

\begin_layout Standard
Jag har följt uppgiftens tips på hur man kan implementera AI, nämligen att
 varje position inom en entitets synhåll får en vikt, där hög vikt är eftersträv
ansvärt.
 Vikten baseras på vad entiteten föredrar och aktar sig för, och vissa önskemål
 påverkar vikten mer än andra.
\end_layout

\begin_layout Standard
En entitet bestämmer sin nästa förflyttning genom följande procedur:
\end_layout

\begin_layout Enumerate
Hitta alla positioner inom synhåll,
\end_layout

\begin_layout Enumerate
vikta positionerna enligt entitetens viktningsfunktion,
\end_layout

\begin_layout Enumerate
behåll endast positioner som angränsar till entiteten,
\end_layout

\begin_layout Enumerate
behåll endast positioner som har högst vikt,
\end_layout

\begin_layout Enumerate
slumpmässigt välj en av de återstående positionerna.
\end_layout

\begin_layout Subsection
Får
\end_layout

\begin_layout Standard
Får skall bete sig på följande vis, i sjunkande prioritetsordning:
\end_layout

\begin_layout Enumerate
Om varg inom synhåll, fly,
\end_layout

\begin_layout Enumerate
annars, om grästuva inom synhåll, närma sig,
\end_layout

\begin_layout Enumerate
annars, gå i ungefär samma riktning som tidigare,
\end_layout

\begin_layout Enumerate
annars, gå i slumpmässig riktning.
\end_layout

\begin_layout Standard
Viktfunktionen definieras av formeln:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
(100\cdot wolf)+(-1\cdot food)+(0.1\cdot prev)\]

\end_inset


\end_layout

\begin_layout Standard
Varje term innehåller en variabel, nämligen ett avstånd: 
\begin_inset Formula $wolf$
\end_inset

 är avståndet till närmaste varg inom synhåll, 
\begin_inset Formula $food$
\end_inset

 är avståndet till närmaste grästuva inom synhåll, och 
\begin_inset Formula $prev$
\end_inset

 är avståndet till entitetens föregående position.
\end_layout

\begin_layout Standard
Varje term multipliceras med en konstant faktor, där faktorns storlek bestämmer
 hur viktigt avståndet anses vara, och faktorns tecken om avståndet skall
 maximeras eller minimeras.
\end_layout

\begin_layout Standard
Sammanfattningsvis kommer denna formel att först och främst maximera avstånd
 till varg (fly från varg), sedan minimera avstånd till gräs (närma sig
 gräs), och till sist maximera avstånd till föregående position (bibehålla
 riktning).
\end_layout

\begin_layout Subsection
Varg
\end_layout

\begin_layout Standard
Vargar skall bete sig på följande vis, i sjunkande prioritetsordning:
\end_layout

\begin_layout Enumerate
Om får inom synhåll, närma sig,
\end_layout

\begin_layout Enumerate
annars, gå i ungefär samma riktning som tidigare,
\end_layout

\begin_layout Enumerate
annars, gå i slumpmässig riktning.
\end_layout

\begin_layout Standard
Vargars beteende fungerar som för får, fast med en annan viktningsformel:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
(-1\cdot food)+(0.1\cdot prev)\]

\end_inset


\end_layout

\begin_layout Standard
Formeln kommer först och främst att minimera avstånd till får (närma sig
 får), och till sist maximera avstånd till föregående position (bibehålla
 riktning).
\end_layout

\end_body
\end_document
