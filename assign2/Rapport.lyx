#LyX 1.6.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass scrartcl
\use_default_options true
\language swedish
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language swedish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Titlehead
Objektorienterad programmering med Java, 10 hp
\begin_inset Newline newline
\end_inset

ST 2010
\end_layout

\begin_layout Title
Inlämningsuppgift 2
\begin_inset Newline newline
\end_inset

Spelet Nm
\end_layout

\begin_layout Author
Sebastian Lundström (selu7901)
\end_layout

\begin_layout Section
Inledning
\end_layout

\begin_layout Standard
Denna rapport behandlar design och implementation av spelet Nm.
 Programmet skall implementeras i programmeringsspråket Java.
\end_layout

\begin_layout Section
Installation
\end_layout

\begin_layout Standard
Dessa instruktioner förutsätter att du befinner dig i en terminal i samma
 mapp som programmets Java-filer och Makefile.
 Du förutsätts även ha tillgång till Java och programmet make.
 Allt som beskrivs i denna sektion beskrivs i mer detalj i programmets Makefile.
\end_layout

\begin_layout Standard
För att både kompilera och köra programmet skrivs enklast:
\end_layout

\begin_layout LyX-Code
$ make
\end_layout

\begin_layout Standard
Detta kommando kompilerar alla .java-filer och kör sedan det resulterande
 programmet med 20 stickor.
 Vill du endast kompilera programmet skriver du:
\end_layout

\begin_layout LyX-Code
$ make compile
\end_layout

\begin_layout Standard
Vill du endast köra programmet och kunna välja antalet stickor skriver du
 följande, där 20 förstås kan ändras efter behov:
\end_layout

\begin_layout LyX-Code
$ java Nm 20
\end_layout

\begin_layout Section
Körexempel
\end_layout

\begin_layout Standard
XXX
\end_layout

\begin_layout Section
Systemdesign
\end_layout

\begin_layout Standard
Här diskuterar jag hur jag valde att utforma klasserna i systemet, och kortfatta
t om hur de interagerar med varandra.
\end_layout

\begin_layout Subsection
Spelare
\end_layout

\begin_layout Standard
Enligt specifikationen behövs en abstrakt basklass för spelare, samt två
 subklasser för människa och dator.
 Eftersom alla spelare måste bete sig gentemot omvärlden på likartade sätt
 valde jag att skapa ett spelar-interface som basklassen (åtminstone delvis)
 implementerar.
 Överallt där någon sorts spelare krävs förväntas alltså ett interface i
 stället för någon specifik klass.
 Se figur:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/khu/School/Desktop/oopjava/assign2/misc/Player.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Klassdiagram över spelare.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Gränssnitt
\end_layout

\begin_layout Standard
Gränssnitt är något som kan tänkas förändras i framtiden, så jag upprättade
 ett interface även för detta.
 Det är inte mycket, men i alla fall en början.
 Det enda som har implementerats är ett gränssnitt för kommandoraden.
 Se figur:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/khu/School/Desktop/oopjava/assign2/misc/UserInterface.svg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Klassdiagram över gränssnitt.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Spelstrategier
\end_layout

\begin_layout Standard
En av de mer intressanta aspekterna i spelet är hur datorspelare väljer
 sina drag.
 För att hålla nere onödig koppling mellan klasser valde jag även här ett
 interface.
 Tanken är att en datorspelare inte vet något mer om sin strategi än vad
 interfacet (vilket är minimalt) avslöjar.
\end_layout

\begin_layout Standard
När en datorspelare skapas skickas en instans av någon strategi in i dess
 konstruktor.
 När datorspelaren sedan skall utföra sitt drag överlåts det till strategin.
 Detta är en implementation av designmönstret 
\begin_inset Quotes sld
\end_inset

strategy
\begin_inset Quotes srd
\end_inset

, där tanken är att kapsla in olika algoritmer bakom ett interface.
 Se figur:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename misc/AiStrategy.svg
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Klassdiagram över spelstrategier.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Övrigt
\end_layout

\begin_layout Standard
Återstoden av systemet är enstaka klasser:
\end_layout

\begin_layout Description
Nm Spelets startklass, vilken innehåller main-metoden.
 Skapar instanser av relevanta klasser och låter en instans av GameOfNm
 ta över kontrollen.
\end_layout

\begin_layout Description
GameOfNm Genomför en omgång av spelet Nm.
\end_layout

\begin_layout Description
PileOfSticks Högen med stickor som spelarna arbetar med.
\end_layout

\begin_layout Description
Move Ett drag som består av ett antal stickor som en spelare vill plocka
 från högen.
\end_layout

\begin_layout Description
Rules Spelets regler.
 Bestämmer om ett drag är giltigt, om spelet är slut och kan svara på hur
 många stickor som får plockas för tillfället.
\end_layout

\begin_layout Description
Utils En abstrakt klass som innehåller ett fåtal statiska metoder för t.ex.
 slumptalsgenerering.
\end_layout

\end_body
\end_document
